module Example where


import frege.prelude.Floating
import frege.prelude.PreludeList



x :: Int -> [Int]
x a = [1,2,3,4]

type ArrayOf s a = Mutable s (JArray a)


concat_three_times :: Int -> String
concat_three_times x = show x ++ show x ++ show x



factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n-1)

quadrt :: Double -> Double
quadrt = sqrt . sqrt

data Color = Red | Green | Blue
    where
        favored Red = true
        favored Blue = true
        favored _    = false




data Currency = Currency String where
    paying :: Currency -> String
    paying (Currency s) = "We pay in " ++ s

main _ = println euro.paying
    where euro = Currency "EUR"